## Name Of the Application: Slack-chat
## Tool used: 
    Vscode, 
    Next FrameWork,
    bun/npm [package-manger]
    ShadCn/ui components,
    Convex --> for Managing Our Database, Authentication.

## App start guide:
    - First naviagte inside the root dir: slack-chat/
    - Need 2 terminals:
        1. terminal_1 --> Runs the next application on localhost:3000 [bun run dev]
        2. terminal_2 --> Runs convex service, supports Auth and database [bunx convex dev]

## App progress:

[26th Sept 2024]
-- Have setup the next FrameWork and have also added ShadCn support, That provides configurable components.
-- New folder --> features 
    - created under src.
    - Holds a folder --> auth [ecerything releated to auth i.e hooks, api calls, components and screen]
-- Pages marked as "use client" --> means that page is a react component not a react server component
    - react component: 
        Rendered by the browser i.e the client, have access to react-hooks like useStatet and useEffect and DOM objects.
        use:
            - When need interactivity or dynamic content. Have to handle state and make API calls.
            - eg: search Functionality.
    - react server component: 
        - These are rendered on the server and sent to the client.
        - faster compared to client-rendered. No access to react hooks. 
        use:
            - no interactivity needed, pre-rendered HTML need to sent to client i.e static content.
            - blog post or product-list page --> After loaded no change or interaction needed.

[28th Sept 2024]
-- Completed the basic layout for SignUp and SignIn Page.
-- Using and setting up convex [Database Manager] --> ** This has to be always running in a seperate terminal, to have access to database **
    --> Convex is the real-time database. i.e as soon as you update the database in backend, it will refelect in the client.

NOTE:
-- If parents are "use client" i.e client component --> Doesn't necessary means all it's children has to be clien too.
-- They can have server component as children, as long as they are passed using children prop.

** Basic Routing in Next App:
    -- Under app folder --> crate a new folder eg: test --> add a new file eg: page.tsx.
    -- Thus, now the above file open at: localhost:3000/test
    -- NOTE: 
        - page.tsx cannot have named export i.e export const page = () => {...} 
        - It must have default export. i.e const page = () => {...} export default page;

** Implementing Auth using Convex Auth
    -- For Setting up convex --> follow the Docs. [https://docs.convex.dev/quickstart/nextjs]
    -- Just Follow the ConvexAuth Docs. [https://labs.convex.dev/auth/setup]
    -- Use Auth.js under the hood.
    -- Make sure you maintain the File-structure carefully and also Handles the import and export of Modules properly.

OAuth -> The user Clicks on a btn to signIn with third-party like Github, Facebook or Google Account.
      -> Once user Authenticate on Third-party, he is landed back to App dashboard.

-- Convex Auth helps in handling secrets between the third-party app and our backend.

-- Login Provider setup using Convex-Auth [https://labs.convex.dev/auth/config/oauth]
    1. For Github Login: [Configuration/OAuth]
        - You need to first register a Oauth App in your Github profile --> Developer settings --> Oauth --> register your callback url and app details.
        - Get the client Id and secrests that to be used --> Add to convex.
        - "useAuthActions" from convexdev provides --> SignIn and SignOut method that handles signIn and SignOut for the user.
    NOTE:
        - signOut is making a post call to the previous url --> this we handled by force redirecting using window.location.href.
    
    2. For Google Login:
        - Go to google cloud console. --> create project --> search "api & services" --> oAuth Consent --> external --> Fill in App Details.
        - Skip the app img upload & under authorized domian fill the Convex HTTP Actions URL. [convex dashboard --> settings -> URL & Deploy key] --> Skip everything and save it.
        - Once Done, create the creds, for Authorized js --> give localhost:3000 and for redirecting url, give the one from convex.
        - Once setup, Add the clientId and secret key to convex and add google to auth.ts file and It should work.

## Both OAuth Working Without any Issue with ConvexAuth. --> Awesome..

    3. Login with Creds: 
        - First, need to configure the auth.ts in convex folder --> Add Password provider.
          - This takes care of both signIn and Register User/signUp.
        - Next, You need to handle the Passoword login method.
        - ConvexAuth Password provider --> Includes Password Check with length, one caps and one specialCharater. i.e Tester@123

NOTE:
    -- All the provider github, google and Password seems to be working fine.
    -- Not sure, [** check **]
        Why it's making post call, on successful Authentication via password and signOut call.
    -- Work-Around:
       The issue on redirecting using signIn and signOut method --> added window.location.reload() to refresh the browser url. --> makes a GET call.

TODO:
## Fix the user's name Field empty in Convex users table issue with Password Provider:
    -- With OAuth, the name column in user table is automatically populated. But with Register user, It is Empty.
    -- Fix:
        - In auth.ts under convex folder, add the Passoword<DataModel>({...})
        - Replace the normal Password Provider with this new CustomPassword.
        - This will fill that column in the user table.

NOTE:
    -- To Clear all users session --> go to convex dashboard --> clear all Auth releated tables.

NOTE:
    -- use interface for Handling Object that wraps multiple types of data. reference: sign-up-card.tsx
    -- Page.tsx in any route folder under app eg: auth folder, Should do default export of the component.
    -- Inside Components Folder, [ **This folder is created automatically when you use shadcn** ]
        -> ui --> Components from shadcn.
        -> convex-client-provider.tsx --> Links convex db with Our Next client.
    -- Inside feature,
        -> Feature wise we have folders. 
            eg: auth --> contains all it's component used, type files and service calls.

[2nd Oct 2024]
** Creating the Profile Button:
    -- new Component Added --> user-button.tsx under feature/auth/component
    -- shadcn component used --> avatar, dropdown-menu

## How to handle fetching the current loggedIn User Details...
    - Under convex --> Create a new users.ts file --> export the query method from there.
    - Create a custom Hook --> under feature/auth/api --> use-current-user.ts --> That brings details of the current loggedin User.
    - Now you add this custom hook, whereEver you want to fetch current user details.
    - Logically, 
        - We need to get the current LoggedIn user details.
        - In users.ts [under convex folder]
            - We use getAuthUserId(ctx) --> Gives us the logged in User's Id.
            - then to fetch the details, we use ctx.db.get(getAuthUserId) --> gives the details of the loggedin user.
        - In Custom-hook: [under feature/auth/api]
            - To make the call, useQuery -> pass the api.[folder_name-you-created-above].[method-you-exported].
            - You have the data. --> use it as per need.
    NOTE:
        - Don't Forget to handle data as undefined [i.e It's Still fetching the data] and data as null -> No Response from DB.

NOTE:
    - From Component Files we can named export. But from page.tsx, we always need to default export.

MileStone_1: 
    -- We are able to Login using Password, OAuth [github and google].
    -- We have a signIn and SignUp Page Built, With Input Validations and Database connected.
    -- We are able to Naviagte to our Home Landing Page, have Profile Badge Implement.
    -- Logout Functionality is Also Implemented.


** WorkSpace Creation Api and Modal: 

    -- New Table creation: [convex/schema.ts] --> Workspaces --> holds the name of workspace, who crated it and joinCode.
    -- install new package:
        1. jotai --> global state management.
        2. dialog --> From shadcn, ui component
    -- Write a workspace.ts [in Convex folder], then call the query from feature/workspaces/api/use-get-workspaces custom hook.
    -- Logically, In Landing Page,
        - If workSpace exists -> Go to that WorkSpace.
        - If workspace doesn't exist --> Open a modal for user to Create a Workspace.

## Create a Global state For the CreateWorkspaceModal with joti
    -- First create a new file --> feature/workspaces/store/use-create-workspace-modal.
    -- Then useAtom and atom from jotai and return the state.
    Why ?
        --> Basically to handle the modal, we can simply use useState boolean to handle it.
        --> But useState will be specific to that component alone.
        --> But with jotai, You just made a global state to control the modal state. *** coool ***

-- Now, Create a new component for the create Workspace Dialoge Modal, Add it in the Layout.ts under src/app.
    --> Better Way to handle more Modals:
        - create a new modals.tsx under src/app/components.
        - import all the modals, --> have a component that renders all the modals.
        - Add this in the layout.tsx file. 
    NOTE:
        To Prevent hyderation error with jotai, When they gets render with server-side my mistake.
        --> Solution: Make Sure the modals folder is client rendered --> useEffect and "useClient" Make it for sure client rendered.

## Create an api end point to handle creation of workspace:
    1. Handling the DB Insert:    
        -- we will go to convex/workspace.ts --> add a new method createWorkSpace.
        -- This will be mutation method i.e updating existing table.
            NOTE: use query method when you are just reading from the table.
        -- This Works with an args --> That is passed as param to the handler method.
        -- Returns the newly created workspaceId.
    2. Handle the api [contains workspace related hooks] under feature/workspace/api:
        -- use-get-workspaces: Fetches all the workspaces for the current loggedIn userId.
        -- use-create-workspace:
            - Very powerful custom hook.
            - Goal: To handle creation of new Workspace, all gives us the API states, like 
                    isPending [time taken for the cration of workspace] --> used to diable the buttons and input fields during workspace creation.
                    isSuccess -> Returns a success method, that holds the response as param. --> Can be used to determine what to do when the creation is successful.
                    isError -> In case of error --> holds the Error Object as param. --> Can be used to render a Error fallback screen.
                    isSettled -> Once the call is done, If any action, this method can be used.
        
        *** IMP: Best Example, how to write and use a Complex api custom hook with nextJs and Convex *** [use as reference]
    3. A WorkSpace Landing Page:
        - New folder added under app/workspace--> [workspaceId]/page.tsx  [** This is how dynamic rounting handled ***]
        - eg: /workspace/34242424 --> lands to the the above page.
        - that id can be extracted in PageProps Interface {params: {workspaceId: string}} [Note: The name here and the above in dynamic route must match]

** Workspace Landing Page:

    -- 


MileStone_2
    --  Now we are able to create a New Workspace and Land to that Workspace Route.