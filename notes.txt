## Name Of the Application: Slack-chat
## Tool used: 
    Vscode, 
    Next FrameWork,
    bun/npm [package-manger]
    ShadCn/ui components,
    Convex --> for Managing Our Database, Authentication.

## App start guide:
    - First naviagte inside the root dir: slack-chat/
    - Need 2 terminals:
        1. terminal_1 --> Runs the next application on localhost:3000 [bun run dev]
        2. terminal_2 --> Runs convex service, supports Auth and database [bunx convex dev]

## App progress:

[26th Sept 2024]
-- Have setup the next FrameWork and have also added ShadCn support, That provides configurable components.
-- New folder --> features 
    - created under src.
    - Holds a folder --> auth [ecerything releated to auth i.e hooks, api calls, components and screen]
-- Pages marked as "use client" --> means that page is a react component not a react server component
    - react component: 
        Rendered by the browser i.e the client, have access to react-hooks like useStatet and useEffect and DOM objects.
        use:
            - When need interactivity or dynamic content. Have to handle state and make API calls.
            - eg: search Functionality.
    - react server component: 
        - These are rendered on the server and sent to the client.
        - faster compared to client-rendered. No access to react hooks. 
        use:
            - no interactivity needed, pre-rendered HTML need to sent to client i.e static content.
            - blog post or product-list page --> After loaded no change or interaction needed.

[28th Sept 2024]
-- Completed the basic layout for SignUp and SignIn Page.
-- Using and setting up convex [Database Manager] --> ** This has to be always running in a seperate terminal, to have access to database **
    --> Convex is the real-time database. i.e as soon as you update the database in backend, it will refelect in the client.

NOTE:
-- If parents are "use client" i.e client component --> Doesn't necessary means all it's children has to be clien too.
-- They can have server component as children, as long as they are passed using children prop.

** Basic Routing in Next App:
    -- Under app folder --> crate a new folder eg: test --> add a new file eg: page.tsx.
    -- Thus, now the above file open at: localhost:3000/test
    -- NOTE: 
        - page.tsx cannot have named export i.e export const page = () => {...} 
        - It must have default export. i.e const page = () => {...} export default page;

** Implementing Auth using Convex Auth
    -- For Setting up convex --> follow the Docs. [https://docs.convex.dev/quickstart/nextjs]
    -- Just Follow the ConvexAuth Docs. [https://labs.convex.dev/auth/setup]
    -- Make sure you maintain the File-structure carefully and also Handles the import and export of Modules properly.

OAuth -> The user Clicks on a btn to signIn with third-party like Github, Facebook or Google Account.
      -> Once user Authenticate on Third-party, he is landed back to App dashboard.

-- Convex Auth helps in handling secrets between the third-party app and our backend.

-- Login Provider setup using Convex-Auth [https://labs.convex.dev/auth/config/oauth]
    1. For Github Login: [Configuration/OAuth]
        - You need to first register a Oauth App in your Github profile --> Developer settings --> Oauth --> register your callback url and app details.
        - Get the client Id and secrests that to be used --> Add to convex.
        - "useAuthActions" from convexdev provides --> SignIn and SignOut method that handles signIn and SignOut for the user.
    NOTE:
        - signOut is making a post call to the previous url --> this we handled by force redirecting using window.location.href.
    
    2. For Google Login:
        - Go to google cloud console. --> create project --> search "api & services" --> oAuth Consent --> external --> Fill in App Details.
        - Skip the app img upload & under authorized domian fill the Convex HTTP Actions URL. [convex dashboard --> settings -> URL & Deploy key] --> Skip everything and save it.
        - Once Done, create the creds, for Authorized js --> give localhost:3000 and for redirecting url, give the one from convex.
        - Once setup, Add the clientId and secret key to convex and add google to auth.ts file and It should work.

## Both OAuth Working Without any Issue with ConvexAuth. --> Awesome..

    3. Login with Creds: 
        - 